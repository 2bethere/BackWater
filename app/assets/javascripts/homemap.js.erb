/*****************************
 * Carolyn Yang (c) 2014
 * Do not copy or redistribute
 */

// Window resizing needs
var w = window,
    d = document,
    e = d.documentElement,
    g = d.getElementsByTagName('body')[0];
// URL history
var stateObj;
// Scrolling need
var isMoving = false;

// Map config object
var bwConfig = new Object();
bwConfig.xResolution = 60;
bwConfig.yResolution = 40;

var bgStore = new Object();

/* Main stage program starts here */
var url;

var map;
var geocoder;
var marker;
//
function initialize() {
    geocoder = new google.maps.Geocoder();

    var mapStyle = [ { "featureType": "landscape.man_made", "stylers": [ { "visibility": "off" } ] },{ "featureType": "poi", "stylers": [ { "visibility": "off" } ] },{ "featureType": "transit", "stylers": [ { "visibility": "off" } ] },{ "featureType": "landscape.natural", "stylers": [ { "color": "#fcfcfc" } ] },{ },{ "featureType": "road", "stylers": [ { "saturation": -100 } ] },{ "featureType": "water", "stylers": [ { "color": "#daedff" } ] },{ "elementType": "labels", "stylers": [ { "lightness": 26 } ] },{ } ];
    var myLatlng = new google.maps.LatLng(-25.363882,131.044922);

    var mapOptions = {
        zoom: 4,
        disableDefaultUI: true,
        center: myLatlng,
        styles: mapStyle
    };

    map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);
    marker = new google.maps.Marker({
        map: map,
        anchorPoint: new google.maps.Point(0, 0)
    });
    marker.setIcon(/** @type {google.maps.Icon} */({
        url: '<%= asset_path 'marker.png' %>',
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(35, 35),
        animation: google.maps.Animation.DROP
    }));

}

function loadScript() {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDQLZ-U3WnaDM6IoWVrM90P9sFswn2xbVg&sensor=false&' +
            'libraries=places&callback=initialize';
    document.body.appendChild(script);
}



$( document ).ready(function() {
    updateWindow();
    setupBox();
    moveBoxToIndex(1); // 0 based index
    setupNavLinkClick();
    setupFormsAndLinks();
    loadScript();
});

//
function setupBox(){
    width = window.innerWidth;
    height = window.innerHeight;
    // Setup each box to match page
    $(".box").height(height);
    $(".box").width(width);
    $(".boxpanel").height(height*$(".box").length);
}

function moveBoxToIndex(targetIndex)
{
    height = window.innerHeight;

    $( ".boxpanel" ).animate({
        top : - targetIndex * height
    }, 1000);

    var offset = $(".menubuttoncontainer").offset();
    var buttonHeight = $(".menubutton").first().outerHeight();
    $( ".menuhighlight" ).animate({
        top : offset.top + buttonHeight * targetIndex
    }, 1000);
    // Menu icons
    // Reset all icons to gray
    $(".menubutton").children(".menubuttonicon").css("background-image", function(index, value){
    return value.replace("blue","gray");
    });
    // blue icon

    var bgurl = $($(".menubutton")[targetIndex]).children(".menubuttonicon").css("background-image");
    var result = bgurl.replace("gray","blue");
    $($(".menubutton")[targetIndex]).children(".menubuttonicon").css("background-image",result);
    // reset all text
    $(".menubuttontext").removeClass("menubuttontextactive");
    //blue text

    $($(".menubutton")[targetIndex]).children(".menubuttontext").addClass("menubuttontextactive");
}

function setupFormsAndLinks(){
    $(document).on("click","#boxoverlay a[href]",function(e){
        $("#boxoverlay").load(e.target.href, function(){
            console.log("new page loaded");
        });
        return false;
    });
    //
    $(document).on("click",".imagethumb",function(e){
        console.log(e.target.parentNode.href);
        var postPos = $("#boxoverlay").offset();
        $("#picturebox").html('<span class="helper"></span><img src="'+e.target.parentNode.href +'" width="100%" />');
        $("#picturebox").offset({top: 60, left: (postPos.left + 700)});
        $("#picturebox").show();
        $("#closebutton").show();
        var closeOffset = $("#picturebox img").offset();
        closeOffset.left -=30;
        closeOffset.top -=30;
        $("#closebutton").offset(closeOffset);
        return false;
    });
    //
    $(document).on("click","#closebutton",function(e){
        $("#closebutton").hide();
        $("#picturebox").html('');
    });
    //
    $(document).on("click",".mypostrow",function(e){
        var data_element = $(e.target).closest(".mypostrow").children(".datacontainer").html();
        // data_element is the post id
        loadPostUrl(data_element);
        history.pushState(stateObj, "post "+data_element, "/l/"+data_element);
    });
}

function setupNavLinkClick(){
    // Main menu on left
    $(".menubutton").click(function(event){
        var targetBoxIndex =$(".menubutton").index($(event.target).closest($(".menubutton")));
        moveBoxToIndex(targetBoxIndex);
    });
    // New feed page navigation
    $(".navmid li").click(function(event){
        event.preventDefault();
        url = event.target.href;
        if(!url){
            url = $(event.target).children(":first")[0].href;
        }
        var $t = $(event.target);
        var offset = $t.offset().left + ( $t.width() - $("#boxoverlay").width())/2 ;

        // Hide if the box is visible
        $("#boxoverlay").slideUp("fast");

        $("#boxoverlay").offset({ top: 60, left: offset });
        $.ajax( url )
            .done(function(result) {
                $("#boxoverlay").html(result);
                $("#boxoverlay").slideDown("slow");
                console.log("new page loaded, applying fullpage scroll");
                console.log($('#fullpage'));
                $('#fullpage').fullpage(
                    {verticalCentered:false,
                        navigation:true,
                        normalScrollElements: '#map-canvas, .scrollpanel',
                        scrollOverflow: true,
                        afterLoad: renderPostGraph,
                        afterRender: renderPostGraph
                        });
                setupLocationComplete();
                renderPostGraph(null, 0);
            })
            .fail(function(result) {
                $("#boxoverlay").load("/users/sign_in");
                $("#boxoverlay").slideDown("slow");
            });
    });
}

function loadPostUrl(postid) {
    var $t = $(".navmid li");
    var offset = $t.offset().left + ( $t.width() - $("#boxoverlay").width())/2 ;

    // Hide if the box is visible
    $("#boxoverlay").slideUp("fast");
    $("#boxoverlay").offset({ top: 60, left: offset });
    var url = "/posts/list/"+postid;
    $.ajax( url )
            .done(function(result) {
                $("#boxoverlay").html(result);
                $("#boxoverlay").slideDown("slow");

                console.log("new page loaded, applying fullpage scroll");
                console.log($('#fullpage'));
                $('#fullpage').fullpage(
                        {verticalCentered:false,
                            navigation:true,
                            normalScrollElements: '#map-canvas, .scrollpanel',
                            scrollOverflow: true,
                            afterLoad: renderPostGraph,
                            afterRender: renderPostGraph
                        });
                setupLocationComplete();
                renderPostGraph(null, 0);
            });
}

function offsetCenter(latlng,offsetx,offsety) {

// latlng is the apparent centre-point
// offsetx is the distance you want that point to move to the right, in pixels
// offsety is the distance you want that point to move upwards, in pixels
// offset can be negative
// offsetx and offsety are both optional
    map.setZoom(6);
    var scale = Math.pow(2, map.getZoom());
    var nw = new google.maps.LatLng(
            map.getBounds().getNorthEast().lat(),
            map.getBounds().getSouthWest().lng()
    );

    var worldCoordinateCenter = map.getProjection().fromLatLngToPoint(latlng);
    var pixelOffset = new google.maps.Point((offsetx/scale) || 0,(offsety/scale) ||0)

    var worldCoordinateNewCenter = new google.maps.Point(
            worldCoordinateCenter.x - pixelOffset.x,
            worldCoordinateCenter.y + pixelOffset.y
    );

    var newCenter = map.getProjection().fromPointToLatLng(worldCoordinateNewCenter);

    map.panTo(newCenter);
    marker.setPosition(latlng);
}

function setupLocationComplete(){
    if(!$("#post_location").length){ return;} // Can't find input
    var input = /** @type {HTMLInputElement} */(
            document.getElementById('post_location'));
    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo('bounds', map);
    //
    //var infowindow = new google.maps.InfoWindow();


    google.maps.event.addListener(autocomplete, 'place_changed', function() {
        //infowindow.close();
        marker.setVisible(false);
        var place = autocomplete.getPlace();
        if (!place.geometry) {
            return;
        }

        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
        } else {
            map.setCenter(place.geometry.location);
            map.setZoom(14);  // Why 17? Because it looks good.
        }
        offsetCenter(place.geometry.location,400);

        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        var address = '';
        if (place.address_components) {
            address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
        }

        //infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
        //infowindow.open(map, marker);
    });



}

function renderPostGraph(anchorLink, index) {
    console.log("Render graph");
    var target = $(".section")[index - 1];
    var data_element = $(target).find(".datacontainer").html();
    if(!data_element) {
        //Try finding the first one
        data_element = $(".datacontainer").first().html();
        console.log("Data_element:");
        console.log(data_element);
        if(!data_element) {
            // return if still can't find anything.
            return false;
        }else{
            target = $(".datacontainer").parent();
        }
    };
    try{
        var data = JSON.parse(data_element);
        var svg_node = $(target).find("#grapharea");
        $(svg_node).html("");
        //init
        var cScale = d3.scale.linear().domain([0, 360]).range([0, 2 * Math.PI]);

        var vis = d3.select(svg_node[0]);

        //cholera_o1
        var plotData = new Array();
        switch(data["cholera_o1"]){
            case 2:
                plotData.push({color: "#FF0000"});
                break;
            case 1:
                plotData.push({color: "#00FF00"});
                break;
            default:
                plotData.push({color: "#EEEEEE"});

        }
        switch(data["cholera_o139"]){
            case 2:
                plotData.push({color: "#FF0000"});
                break;
            case 1:
                plotData.push({color: "#00FF00"});
                break;
            default:
                plotData.push({color: "#EEEEEE"});

        }
        console.log("plot data");

        var cholera_group = vis.append("g");

        var arc = d3.svg.arc()
            .innerRadius(60)
            .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = cholera_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");


        g.append("path")
                .style("fill", function(d) { return d.data.color; })
                .attr("transform", "translate(140,100)")
                .transition().delay(function(d, i) { return i * 600; }).duration(600)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        cholera_group.selectAll("image")
            .data([0])
            .enter()
            .append("image")
            .attr("xlink:href", '<%= asset_path 'cholera.png' %>')
            .attr("x", "110")
            .attr("y", "100")
            .attr("width", "60")
            .attr("height", "60");

        //nitrite
        plotData = undefined;
        plotData = new Array();
        var count = data["nitrite"];
        plotData.push({color:"#F1E5EA"});
        if(count > 5) {
            plotData.push({color:"#F3DDE7"});
        }
        if(count > 4) {
            plotData.push({color:"#F4CADF"});
        }
        if(count > 3) {
            plotData.push({color:"#E6AACD"});
        }
        if(count > 2) {
            plotData.push({color:"#DC85B7"});
        }

        if(count > 1) {
            plotData.push({color:"#CD539E"});
        }
        for(var i = (6-count);i>0;i--)
        {
            plotData.push({color:"#EEEEEE"});
        }

        var nitrite_group = vis.append("g");

        var arc = d3.svg.arc()
                .innerRadius(60)
                .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = nitrite_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");

        g.append("path")
                .style("fill", function(d) { console.log(d); return d.data.color; })
                .attr("transform", "translate(410,100)")
                .transition().delay(function(d, i) { return i * 200; }).duration(200)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        nitrite_group.selectAll("image")
                .data([0])
                .enter()
                .append("image")
                .attr("xlink:href", '<%= asset_path 'nitrite.png' %>')
                .attr("x", "380")
                .attr("y", "100")
                .attr("width", "60")
                .attr("height", "60");
        //coliform
        var plotData = new Array();
        switch(data["coliform"]){
            case 2:
                plotData.push({color: "#F6ED7F"});
                plotData.push({color: "#EEEEEE"});
                break;
            case 1:
                plotData.push({color: "#EEEEEE"});
                plotData.push({color: "#4CC1BC"});
                break;
            default:
                plotData.push({color: "#EEEEEE"});
                plotData.push({color: "#EEEEEE"});

        }

        console.log("plot data");

        var coliform_group = vis.append("g");

        var arc = d3.svg.arc()
                .innerRadius(60)
                .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = cholera_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");


        g.append("path")
                .style("fill", function(d) { return d.data.color; })
                .attr("transform", "translate(140,300)")
                .transition().delay(function(d, i) { return i * 600; }).duration(600)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        coliform_group.selectAll("image")
                .data([0])
                .enter()
                .append("image")
                .attr("xlink:href", '<%= asset_path 'coliform.png' %>')
                .attr("x", "110")
                .attr("y", "300")
                .attr("width", "60")
                .attr("height", "60");

        //arsenic
        plotData = undefined;
        plotData = new Array();
        var count = data["arsenic"];
        plotData.push({color:"#F2E9AC"});
        if(count > 5) {
            plotData.push({color:"#EED772"});
        }
        if(count > 4) {
            plotData.push({color:"#E8BC22"});
        }
        if(count > 3) {
            plotData.push({color:"#E89427"});
        }
        if(count > 2) {
            plotData.push({color:"#CD6631"});
        }

        if(count > 1) {
            plotData.push({color:"#793C2C"});
        }
        for(var i = (6-count);i>0;i--)
        {
            plotData.push({color:"#EEEEEE"});
        }

        var arsenic_group = vis.append("g");

        var arc = d3.svg.arc()
                .innerRadius(60)
                .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = arsenic_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");

        g.append("path")
                .style("fill", function(d) { console.log(d); return d.data.color; })
                .attr("transform", "translate(410,300)")
                .transition().delay(function(d, i) { return i * 200; }).duration(200)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        arsenic_group.selectAll("image")
                .data([0])
                .enter()
                .append("image")
                .attr("xlink:href", '<%= asset_path 'arsenic.png' %>')
                .attr("x", "380")
                .attr("y", "300")
                .attr("width", "60")
                .attr("height", "60");
        console.log(data);
        // Draw line graph
        var line_group = vis.append("g");

        // define dimensions of graph
        var m = [80, 80, 80, 80]; // margins
        var w = 1000 - m[1] - m[3]; // width
        var h = 400 - m[0] - m[2]; // height

        var plotdata = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7];


        var x = d3.scale.linear().domain([0, data.length]).range([0, w]);

        var y = d3.scale.linear().domain([0, 10]).range([h, 0]);


        var line = d3.svg.line()
                .x(function (d, i) {
                    return x(i);
                })
                .y(function (d) {
                    return y(d);
                });
        line_group.selectAll("path")
                .append("path")
                .attr("d",line(plotdata))
                .attr("transform", "translate(0,0)");

        //set locations
        var address = data["location"];
        geocoder.geocode( { 'address': address}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                console.log("Geocode");
                console.log(results[0]);
                offsetCenter(results[0].geometry.location,400);

            } else {
                console.log("Geocode was not successful for the following reason: " + status);
            }
        });

    }catch(err){
        console.log(err);
    }
    // Set locations

}

function updateWindow(){
    x = w.innerWidth || e.clientWidth || g.clientWidth;
    y = w.innerHeight|| e.clientHeight|| g.clientHeight;
	var svg = d3.select("svg");
    svg.attr("width", x).attr("height", y);
    // Update main stage's box layouts
    setupBox();
}


window.onresize = updateWindow;