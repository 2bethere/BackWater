/*****************************
 * Carolyn Yang (c) 2014
 * Do not copy or redistribute
 */

// Window resizing needs
var w = window,
    d = document,
    e = d.documentElement,
    g = d.getElementsByTagName('body')[0];
// URL history
var stateObj;
// Scrolling need
var isMoving = false;

// Map config object
var bwConfig = new Object();
bwConfig.xResolution = 60;
bwConfig.yResolution = 40;

var bgStore = new Object();

/* Main stage program starts here */
var url;

var map;
var geocoder;
var marker;
//
function initialize() {
    geocoder = new google.maps.Geocoder();

    var mapStyle = [ { "featureType": "landscape.man_made", "stylers": [ { "visibility": "off" } ] },{ "featureType": "poi", "stylers": [ { "visibility": "off" } ] },{ "featureType": "transit", "stylers": [ { "visibility": "off" } ] },{ "featureType": "landscape.natural", "stylers": [ { "color": "#fcfcfc" } ] },{ },{ "featureType": "road", "stylers": [ { "saturation": -100 } ] },{ "featureType": "water", "stylers": [ { "color": "#daedff" } ] },{ "elementType": "labels", "stylers": [ { "lightness": 26 } ] },{ } ];
    var myLatlng = new google.maps.LatLng(-25.363882,131.044922);

    var mapOptions = {
        zoom: 4,
        disableDefaultUI: true,
        center: myLatlng,
        styles: mapStyle
    };

    map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);
    marker = new google.maps.Marker({
        map: map,
        anchorPoint: new google.maps.Point(0, 0)
    });
    marker.setIcon(/** @type {google.maps.Icon} */({
        url: '<%= asset_path 'marker.png' %>',
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(35, 35),
        animation: google.maps.Animation.DROP
    }));

}

function loadScript() {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDQLZ-U3WnaDM6IoWVrM90P9sFswn2xbVg&sensor=false&' +
            'libraries=places&callback=initialize';
    document.body.appendChild(script);
}


//
function setupBox(){
    width = window.innerWidth;
    height = window.innerHeight;
    // Setup each box to match page
    $(".box").height(height);
    $(".box").width(width);
    $(".boxpanel").height(height*$(".box").length);
}

function moveBoxToIndex(targetIndex)
{
    height = window.innerHeight;

    $( ".boxpanel" ).animate({
        top : - targetIndex * height
    }, 1000);

    var offset = $(".menubuttoncontainer").offset();
    var buttonHeight = $(".menubutton").first().outerHeight();
    $( ".menuhighlight" ).animate({
        top : offset.top + buttonHeight * targetIndex
    }, 1000);
    // Menu icons
    // Reset all icons to gray

    $(".menubutton").children(".menubuttonicon").removeClass("menubuttonblue0 menubuttonblue1 menubuttonblue2 menubuttonblue3 menubuttonblue4");
    // blue icon

    $($(".menubutton")[targetIndex]).children(".menubuttonicon").addClass("menubuttonblue"+targetIndex);
    // reset all text
    $(".menubuttontext").removeClass("menubuttontextactive");
    //blue text

    $($(".menubutton")[targetIndex]).children(".menubuttontext").addClass("menubuttontextactive");
}

function setupFormsAndLinks(){
    $(document).on("click","#boxoverlay a[href]",function(e){
        $("#boxoverlay").load(e.target.href, function(){
            console.log("new page loaded");
        });
        return false;
    });
    // Picture box
    $(document).on("click",".imagethumb",function(e){
        var postPos = $("#boxoverlay").offset();


        var img = $("<img />").attr('src', e.target.parentNode.href)
                .load(function() {
                    if (!this.complete || typeof this.naturalWidth == "undefined" || this.naturalWidth == 0) {
                        alert('broken image!');
                    } else {
                        $("#picturebox").hide();
                        $("#picturebox").html('<span class="helper"></span>');

                        if($("#boxoverlay").offset().left>window.innerWidth/2)
                        {
                            $("#picturebox").css({top: 80, left: (180)});
                            $("#picturebox").innerWidth(window.innerWidth -  1000);
                        }else{
                            $("#picturebox").css({top: 80, left: (postPos.left + 540)});
                            $("#picturebox").innerWidth(window.innerWidth - postPos.left - 600);
                        }

                        $("#picturebox").innerHeight(window.innerHeight - 120);

                        $("#picturebox").append(img);
                        $("#picturebox").fadeIn();
                        $("#closebutton").hide();
                        var closeOffset = $("#picturebox img").offset();

                        console.log(closeOffset);
                        $("#closebutton").css({top: closeOffset.top-20, left:closeOffset.left-20});
                        $("#closebutton").fadeIn();
                    }
                });



        return false;
    });
    // Close image
    $(document).on("click","#closebutton",function(e){
        $("#closebutton").fadeOut();
        $("#picturebox").fadeOut(400,function(){
            $("#picturebox").html('');
        });

    });
    // My post click
    $(document).on("click",".mypostrow",function(e){
        var data_element = $(e.target).closest(".mypostrow").children(".datacontainer").html();
        // data_element is the post id
        loadPostUrl(data_element);
        history.pushState(stateObj, "post "+data_element, "/l/"+data_element);
    });
}

function setupNavLinkClick(){
    // Main menu on left
    $(".menubutton").click(function(event){
        var targetBoxIndex =$(".menubutton").index($(event.target).closest($(".menubutton")));
        moveBoxToIndex(targetBoxIndex);
    });
    // New feed page navigation
    $(".navmid li").click(function(event){
        event.preventDefault();
        url = event.target.href;
        if(!url){
            url = $(event.target).children(":first")[0].href;
        }
        var t = $(event.target).closest("li");

        $.ajax( url )
                .done(function(result) {
                    $("#boxoverlay").html(result);
                    $("#boxoverlay").slideDown("slow");
                    console.log("new page loaded, applying fullpage scroll");
                    resizeBoxOverlay();
                    $('#fullpage').fullpage(
                            {verticalCentered:false,
                                navigation:true,
                                normalScrollElements: '#map-canvas, .scrollpanel',
                                scrollOverflow: true,
                                afterLoad: renderPostGraph,
                                afterRender: renderPostGraph
                            });
                    setupLocationComplete();
                    renderPostGraph(null, 0);
                })
                .fail(function(result) {
                    $("#boxoverlay").load("/users/sign_in");
                    $("#boxoverlay").slideDown("slow");
                })
                .always(function() {
                    $("#boxoverlay").css({ top: 35, left: t.offset().left -140 });
                });
    });
}

function loadPostUrl(postid) {
    var url = "/posts/list/"+postid;

    $.ajax( url )
            .done(function(result) {
                $("#boxoverlay").html(result);
                $("#boxoverlay").slideDown("slow");
                console.log("new page loaded, applying fullpage scroll");
                resizeBoxOverlay();
                $('#fullpage').fullpage(
                        {verticalCentered:false,
                            navigation:true,
                            normalScrollElements: '#map-canvas, .scrollpanel',
                            scrollOverflow: true,
                            afterLoad: renderPostGraph,
                            afterRender: renderPostGraph
                        });
                setupLocationComplete();
                renderPostGraph(null, 0);
            })
            .fail(function(result) {
                $("#boxoverlay").load("/users/sign_in");
                $("#boxoverlay").slideDown("slow");
            })
            .always(function() {
                $("#boxoverlay").css({ top: 35, left: $("nav").find("li").last().offset().left - 140 });
            });
}

function resizeBoxOverlay()
{
    $("#boxoverlay").innerHeight(window.innerHeight-35);
}

function offsetCenter(latlng,offsetx,offsety) {

// latlng is the apparent centre-point
// offsetx is the distance you want that point to move to the right, in pixels
// offsety is the distance you want that point to move upwards, in pixels
// offset can be negative
// offsetx and offsety are both optional
    map.setZoom(6);
    var scale = Math.pow(2, map.getZoom());
    var nw = new google.maps.LatLng(
            map.getBounds().getNorthEast().lat(),
            map.getBounds().getSouthWest().lng()
    );

    var worldCoordinateCenter = map.getProjection().fromLatLngToPoint(latlng);
    var pixelOffset = new google.maps.Point((offsetx/scale) || 0,(offsety/scale) ||0)

    var worldCoordinateNewCenter = new google.maps.Point(
            worldCoordinateCenter.x - pixelOffset.x,
            worldCoordinateCenter.y + pixelOffset.y
    );

    var newCenter = map.getProjection().fromPointToLatLng(worldCoordinateNewCenter);

    map.panTo(newCenter);
    marker.setPosition(latlng);
}

function setupLocationComplete(){
    if(!$("#post_location").length){ return;} // Can't find input
    var input = /** @type {HTMLInputElement} */(
            document.getElementById('post_location'));
    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo('bounds', map);
    //
    //var infowindow = new google.maps.InfoWindow();


    google.maps.event.addListener(autocomplete, 'place_changed', function() {
        //infowindow.close();
        marker.setVisible(false);
        var place = autocomplete.getPlace();
        if (!place.geometry) {
            return;
        }

        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
        } else {
            map.setCenter(place.geometry.location);
            map.setZoom(14);  // Why 17? Because it looks good.
        }
        offsetCenter(place.geometry.location,400);

        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        var address = '';
        if (place.address_components) {
            address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
        }

        //infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
        //infowindow.open(map, marker);
    });



}

function renderPostGraph(anchorLink, index) {
    $("#closebutton").hide();
    $("#picturebox").fadeOut(1000,function(){
        $("#picturebox").html('');
    });

    console.log("Render graph");
    var target = $(".section")[index - 1];
    var data_element = $(target).find(".datacontainer").html();
    if(!data_element) {
        //Try finding the first one
        data_element = $(".datacontainer").first().html();
        console.log("Data_element:");
        console.log(data_element);
        if(!data_element) {
            // return if still can't find anything.
            return false;
        }else{
            target = $(".datacontainer").parent();
        }
    };
    // Set locations
    try{
        var data = JSON.parse(data_element);
        var svg_node = $(target).find("#grapharea");
        $(svg_node).html("");
        //init
        var cScale = d3.scale.linear().domain([0, 360]).range([0, 2 * Math.PI]);

        var vis = d3.select(svg_node[0]);

        //cholera_o1
        var plotData = new Array();
        switch(data["cholera_o1"]){
            case 2:
                plotData.push({color: "#2B3990"});
                break;
            case 1:
                plotData.push({color: "#EEEEEE"});
                break;
            default:
                plotData.push({color: "#EEEEEE"});

        }
        switch(data["cholera_o139"]){
            case 2:
                plotData.push({color: "#2B3990"});
                break;
            case 1:
                plotData.push({color: "#EEEEEE"});
                break;
            default:
                plotData.push({color: "#EEEEEE"});

        }
        console.log("plot data");

        var cholera_group = vis.append("g");

        var arc = d3.svg.arc()
                .innerRadius(60)
                .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = cholera_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");


        g.append("path")
                .style("fill", function(d) { return d.data.color; })
                .attr("transform", "translate(120,100)")
                .transition().delay(function(d, i) { return i * 600; }).duration(600)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        cholera_group.selectAll("image")
                .data([0])
                .enter()
                .append("image")
                .attr("xlink:href", '<%= asset_path 'cholera.png' %>')
                .attr("x", "90")
                .attr("y", "125")
                .attr("width", "60")
                .attr("height", "60");

        if(data["cholera_o1"]=="0" && data["cholera_o139"]=="0")
        {
            var label = "SAFE";
        }else if (data["cholera_o1"]>1 || data["cholera_o139"]>1)
        {
            var label = "RISK";
        }else{
            var label = "SAFE";
        }
        cholera_group
                .append("text")
                .attr("x", "90")
                .attr("y", "105")
                .style("font-size","18pt")
                .text(label);
        //nitrite
        plotData = undefined;
        plotData = new Array();
        var count = data["nitrite"];
        plotData.push({color:"#F1E5EA"});
        if(count > 5) {
            plotData.push({color:"#F3DDE7"});
        }
        if(count > 4) {
            plotData.push({color:"#F4CADF"});
        }
        if(count > 3) {
            plotData.push({color:"#E6AACD"});
        }
        if(count > 2) {
            plotData.push({color:"#DC85B7"});
        }

        if(count > 1) {
            plotData.push({color:"#CD539E"});
        }
        for(var i = (6-count);i>0;i--)
        {
            plotData.push({color:"#EEEEEE"});
        }

        var nitrite_group = vis.append("g");

        var arc = d3.svg.arc()
                .innerRadius(60)
                .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = nitrite_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");

        g.append("path")
                .style("fill", function(d) { return d.data.color; })
                .attr("transform", "translate(350,100)")
                .transition().delay(function(d, i) { return i * 200; }).duration(200)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        nitrite_group.selectAll("image")
                .data([0])
                .enter()
                .append("image")
                .attr("xlink:href", '<%= asset_path 'nitrite.png' %>')
                .attr("x", "321")
                .attr("y", "125")
                .attr("width", "60")
                .attr("height", "60");

        if(data["nitrite"] >= 3)
        {
            var label = "RISK";
        }else{
            var label = "SAFE";
        }
        nitrite_group
                .append("text")
                .attr("x", "320")
                .attr("y", "105")
                .style("font-size","18pt")
                .text(label);
        nitrite_group
                .append("text")
                .attr("x", "330")
                .attr("y", "65")
                .style("font-size","10pt")
                .text(data["nitrite"]+ " ppm");
        //coliform
        var plotData = new Array();
        switch(data["coliform"]){
            case 2:
                plotData.push({color: "#F6ED7F"});
                plotData.push({color: "#EEEEEE"});
                break;
            case 1:
                plotData.push({color: "#EEEEEE"});
                plotData.push({color: "#4CC1BC"});
                break;
            default:
                plotData.push({color: "#EEEEEE"});
                plotData.push({color: "#EEEEEE"});

        }

        console.log("plot data");

        var coliform_group = vis.append("g");

        var arc = d3.svg.arc()
                .innerRadius(60)
                .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = cholera_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");


        g.append("path")
                .style("fill", function(d) { return d.data.color; })
                .attr("transform", "translate(120,300)")
                .transition().delay(function(d, i) { return i * 600; }).duration(600)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        coliform_group.selectAll("image")
                .data([0])
                .enter()
                .append("image")
                .attr("xlink:href", '<%= asset_path 'coliform.png' %>')
                .attr("x", "90")
                .attr("y", "320")
                .attr("width", "60")
                .attr("height", "60");

        if(data["coliform"]!=0)
        {
            var label = "RISK";
        }else{
            var label = "SAFE";
        }
        coliform_group
                .append("text")
                .attr("x", "90")
                .attr("y", "305")
                .style("font-size","18pt")
                .text(label);

        //arsenic
        plotData = undefined;
        plotData = new Array();
        var count = data["arsenic"];
        plotData.push({color:"#F2E9AC"});
        if(count > 5) {
            plotData.push({color:"#EED772"});
        }
        if(count > 4) {
            plotData.push({color:"#E8BC22"});
        }
        if(count > 3) {
            plotData.push({color:"#E89427"});
        }
        if(count > 2) {
            plotData.push({color:"#CD6631"});
        }

        if(count > 1) {
            plotData.push({color:"#793C2C"});
        }
        for(var i = (6-count);i>0;i--)
        {
            plotData.push({color:"#EEEEEE"});
        }

        var arsenic_group = vis.append("g");

        var arc = d3.svg.arc()
                .innerRadius(60)
                .outerRadius(80);

        var pie = d3.layout.pie()
                .startAngle(-120/180*Math.PI)
                .endAngle(120/180*Math.PI)
                .value(function() { return 1; });

        var g = arsenic_group.selectAll()
                .data(pie(plotData))
                .enter().append("g");

        g.append("path")
                .style("fill", function(d) { return d.data.color; })
                .attr("transform", "translate(350,300)")
                .transition().delay(function(d, i) { return i * 200; }).duration(200)
                .ease("linear")
                .attrTween('d', function(d) {
                    var i = d3.interpolate(d.startAngle+0, d.endAngle);
                    return function(t) {
                        d.endAngle = i(t);
                        return arc(d);
                    }
                });

        console.log("Append image");
        arsenic_group.selectAll("image")
                .data([0])
                .enter()
                .append("image")
                .attr("xlink:href", '<%= asset_path 'arsenic.png' %>')
                .attr("x", "322")
                .attr("y", "320")
                .attr("width", "60")
                .attr("height", "60");
        if(data["arsenic"] >= 2)
        {
            var label = "RISK";
        }else{
            var label = "SAFE";
        }
        arsenic_group
                .append("text")
                .attr("x", "320")
                .attr("y", "305")
                .style("font-size","18pt")
                .text(label);
        arsenic_group
                .append("text")
                .attr("x", "330")
                .attr("y", "265")
                .style("font-size","10pt")
                .text(data["arsenic"]+ " ppm");

        // Draw line graph
        var line_group = vis.append("g");

        // define dimensions of graph
        var g_width = 410; // width
        var g_height = 120; // height

        // scaling functions
        var mapx = d3.scale.linear().domain([0, 6]).range([0, g_width]);
        var mapy = d3.scale.linear().domain([0, 10]).range([g_height, 0]);

        var linefunc = d3.svg.line()
                .x(function (d, i) {
                    return mapx(i);
                })
                .y(function (d) {
                    return mapy(d);
                })
                .interpolate("basis");

        line_group.attr("transform", "translate(30,400)");
        // create left yAxis
        var yAxisLeft = d3.svg.axis().scale(mapy).ticks(4).orient("right")
                .tickFormat(function (d) {
                    return d === 10
                            ? d + " million people"
                            : d;
                });
        // Add the y-axis to the left
        line_group.append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(0,0)")
                .call(yAxisLeft);

        var xAxis = d3.svg.axis().scale(mapx).ticks(6).orient("bottom")
                .tickFormat(function (d) {
                    return d === 0
                            ? "Risk scale"
                            : d;
                });
        // Add the x-axis to the bottom
        line_group.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + g_height + ")")
                .call(xAxis);
        //  line
        plotData = [[3, 4, 6, 7, 5, 2, 1],[2, 2, 3, 4, 7, 6, 4],[2, 8, 6, 4, 3, 2, 1],[2, 4, 6, 8, 6, 4, 1]];
        var plotColor = ["#2B3990","#CD539E", "#47C4BE", "#E8942A"];
        for (var i = 0; i<plotData.length; i++)
        {
            var temp_group = line_group.append("g");
            var line_temp = temp_group.append("path")
                    .attr("d",linefunc(plotData[i]))
                    .style("stroke-width","2")
                    .style("stroke",plotColor[i])
                    .style("fill","none");
            var totalLength = line_temp.node().getTotalLength();
            line_temp
                    .attr("stroke-dasharray", totalLength + " " + totalLength)
                    .attr("stroke-dashoffset", totalLength)
                    .transition()
                    .delay(i*500)
                    .duration(1000)
                    .ease("cubic-out")
                    .attr("stroke-dashoffset", 0);
        }


        //set locations
        var address = data["location"];
        geocoder.geocode( { 'address': address}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                console.log("Geocode");
                offsetCenter(results[0].geometry.location,400);

            } else {
                console.log("Geocode was not successful for the following reason: " + status);
            }
        });

    }catch(err){
        console.log(err);
    }

}

function updateWindow(){
    x = w.innerWidth || e.clientWidth || g.clientWidth;
    y = w.innerHeight|| e.clientHeight|| g.clientHeight;
	var svg = d3.select("svg");
    svg.attr("width", x).attr("height", y);
    // Update main stage's box layouts
    setupBox();
    resizeBoxOverlay();
}


window.onresize = updateWindow;


$( document ).ready(function() {
    updateWindow();
    setupBox();
    moveBoxToIndex(1); // 0 based index
    setupNavLinkClick();
    setupFormsAndLinks();
    loadScript();
});